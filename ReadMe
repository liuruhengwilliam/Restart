
2017-10-17
  经过前期思考和基本核心模型验证，今天这个项目正式启动。
  希望今后不论任何困难，都要坚持下去，不断优化和发展。
  此外，也可以将开发心得和经验总结于此。

2017-10-19
  初步实现数据抓取定时器和行情数据库同步刷新的功能。

2017-10-24
  1.实现周期定时器组和行情数据库组的定时更新功能。
  注：定时器精度不够，后续需要优化。两个5分钟定时器的间隔漂移100ms以上。
  2.使用py2exe发布alpha版本V0.1.0。
	
2017-10-25
  1.修复各周期记录中最高/最低价格错误的问题（仅针对FX678网站数据源）；
  2.修复网络异常导致心跳定时器线程退出的问题。
  3.发布alpha-V0.2.0版本。
  
2017-10-26
  1.修复网络抓取模块数据返回异常导致心跳定时器退出的问题。
  2.资源类中相关数组定义转换成元组定义。
  3.心跳定时器更改为6秒。
  4.数据抓取模块增加异常栈跟踪方法。
  4.发布alpha-V0.2.1版本。
  
2017-10-27
  1.市场收盘时间的接口优化。
    每天收盘时间定义为凌晨4点至6点；数据抓取模块应该设定在每周一凌晨6点开始启动。这样能够兼顾到各周期记录（不遗漏）。
  2.每周末收市之后停止运行各周期定时器线程。
    发布alpha-V0.2.2版本。
	
2017-10-30
  1. 周末闭市判断的错误修复。
	
2017-11-11
  1.各模块代码组织和架构优化，以及测试问题修复。
  2.记录talib库资源文件和说明文档。
  3.增加东方财富网数据源。
  4.支持XML配置文件动态设定相关属性。

2017-11-14
  1.Linux环境下安装pyinstaller工具的方法（多尝试）：sudo pip install pyinstaller
  2.Linux环境下发布可执行程序方法：pyinstaller Start.py。注：Start.py为待执行的类。

2017-12-04
  版本规划：
  1.V0.5.X版本重点在于数据抓取和行情数据库的插入与查询操作功能测试和验证。
  2.V0.6.X版本重点解决：多例程并行运行；基于各周期数据的K线画图功能。
  3.V0.7.X版本之后预期实现如下功能：
    3.1 基于talib库策略计算和操作建议功能。
    3.2 盈亏数据库定时统计和记录功能。
    3.3 各周期K线定时记录和图形文件保存功能。
    3.4 基于LWP框架下的金十数据网站数据抓取功能。保证多渠道数据源的可靠性和程序的稳定性。
  4.V1.X.X版本之后实现预期软件功能，即项目设计书中涉及的四个功能模块和两个数据库模型。
    后续可以在数据分析和盈亏展示方面，以及程序的伸缩性和可靠性方面进行继续分析研究。

2017-12-08
  1.Ubuntu系统安装依赖包的经验分享。
    正确的方法是执行如下命令：sudo apt-get install python-matplotlib/pandas。
    其中，使用命令sudo pip install matplotlib总报错失败。
    注：Windows环境中，Anaconda2软件包已经配置好相关依赖包和库文件等环境。Anaconda真是个好东东啊！
  2.Ubuntu系统的matplotlib包版本太低（比如1.3.1），会导致matplotlib.finance中的相关接口函数无法调用。需要升级matplotlib包（比如2.0.2版本）。
    升级方法：sudo pip install --upgrade matplotlib
    
2017-12-28
  1.Ubuntu系统搭建程序运行环境的经验小结。
  问题：89服务器执行程序失败，报错matplotlib相关模块未找到。
  分析：根据之前经验执行命令sudo pip install --U matplotlib时失败。根据报错信息，需要再安装libfreetype6-dev和libpng12-dev两个依赖库。
  方法：依次执行 sudo apt-get install libfreetype6-dev和sudo apt-get install libpng12-dev两个命令。然后再更新matplotlib库即可。

  问题：ta_lib库依赖失败。
  分析：ta_lib动态库由TA-Lib脚本及ta-lib开源项目源码生成。具体方法参见“talib-usage-flow.txt”文档。
  方法：将生成的libta_lib.so动态库放到Ubuntu系统的/usr/lib目录下，并生成相关的软连接文件。libta_lib.so.0和libta_lib.so链接到libta_lib.so.0.0.0库文件上。

2018-01-18
  架构设计：
  采用C/S模式：服务器端负责抓取数据，策略匹配和模式识别，以及管理数据库等方面工作；客户端负责分析策略条目，综合决定并发布提示信息。
  服务器和客户端之间采用网络文件的方式进行通信。

2018-01-25
  为降低各定时器线程之间因竞争共享资源（主要是数据库文件）而产生的耦合，减小程序死锁的概率，进行如下优化：
  对于quote数据：
  1.程序启动时从历史数据库文件中加载quote信息-history DataFrame
  2.当周的数据添加附着在live DataFrame数据结构中
  3.计算指标和策略所需的数据，首先从 live 实体中获取；若不足，再从 history实体中查找，最后拼装起来组成realtime DataFrame实体。
  4.历史数据也包含本周异常退出前产生的数据

  对于ser数据：
  1.check工作由各周期自行完成，并维护对应ser DataFrame实例
  2.ser数据库的插入和更新由5min定时器完成
  3.5min周期与其他周期定时器之间互斥访问ser DataFrame实例
  4.程序启动时，5min定时器要从本周各周期ser数据库文件中加载本周异常退出导致的未完成更新的数据条目

2018-03-01
  对于源码中莫名其妙或者不可思议的报错，可以尝试删除相关pyc文件，然后重新编译调试。

2018-06-01
  numpy版本问题，报错如下：
  TypeError: The numpy boolean negative, the `-` operator, is not supported, use the `~` operator or the logical_not function instead
  解决方法：
    根据报错提示信息，修改文件...\python2.7\...\pandas\core\common.py相应行代码。

2018-06-15
  wxPython安装说明：
  1.下载步骤：在https://wxpython.org/pages/downloads/网页中点击下载链接。根据本机的Python版本，匹配对应的whl文件。
  比如：Windows64位OS和Python2.7.13版本对应的文件有wxPython-4.0.1-cp27-cp27m-win_amd64.whl等版本。
  2.安装步骤：类似TA_Lib，在shell或者cmd中，执行命令pip install wxPython-4.0.1-cp27-cp27m-win_amd64.whl即可。
  3.验证步骤：在shell或者cmd中，执行import wx命令即可验证。

2018-06-16
  Windows环境下py2exe使用初探：
  1.报错SyntaxError: invalid syntax (asyncsupport.py, line 22)。
  根据文章(https://stackoverflow.com/questions/42124464/python-setup-py-py2exe-invalid-syntax-asyncsupport-py-line-22)分析所述。
  PC环境中Python2.7和jinja2模块的2.9版本有不匹配的地方，需要将jinja2模块退到2.8版本即可。在该文章的链接中(https://pypi.org/project/Jinja2/2.8/#files)
  下载Jinja2-2.8-py2.py3-none-any.whl。然后备份Anaconda2\Lib\site-packages中的2.9版本jinja2模块到其他目录，
  最后执行安装命令pip install Jinja2-2.8-py2.py3-none-any.whl。
  2.在cmd环境中执行python setup.py py2exe即可生成dist目录。该目录包含对应的可执行程序.exe文件。
  
2018-06-19
  Windows环境下py2exe使用示例：
  1.要创建图形用户界的程序，需要将setup.py中的console=["xxx.py"]替换为windows=["xxx.py"]。
  2.对于报错"RuntimeError: Could not find the matplotlib data files"，需要指明相关依赖文件的路径。
    在setup.py文件中，增加data_files项。具体请参见示例程序。

2018-06-22
  Windows环境下py2exe使用注意事项。生成exe可执行程序过程中，需要依赖matplotlib库并进行相关修改。
  1.编辑setup.py文件，在data_files项中添加(r'mpl-data', [r'C:\ProgramData\Anaconda2\Lib\site-packages\matplotlib\mpl-data\matplotlibrc'])
  2.针对exe程序运行过程的报错“ImportError: No module named backend_Qt5agg”或者“ImportError: No module named backend_tkagg”，
    需要修改matplotlibrc文件。将该文件中的Qt5Agg或者TkAgg项修改成Agg。http://www.mamicode.com/info-detail-1128188.html

2018-07-09
   Cython安装说明：
   1.Windows环境下，Anaconda2软件包已经包含。
   2.Ubuntu环境下，通过sudo apt-get install cython命令安装。
   以上操作系统都可以在shell或者命令行工具中，通过import Cython来验证是否安装成功。
   
   Cython使用初探：
   1.建议在Ubuntu系统中调试Cython。Windows环境下，运行Cython代码报错。经查需要VS/VC环境并安装相关补丁，而Ubuntu环境下则无此限制。

2018-07-11
    Cython程序打包过程注释。
	1. 使用pyinstaller打包整个程序（含*.pyx文件，该文件有import talib操作）时，报错ImportError: No module name talib。
	解决方法：pyinstaller打包加入参数。具体命令如下：pyinstaller --hidden-import=talib Stock.py
    2. 若有多个依赖库程序需要打包，则不能使用--hidden-import参数法。详见https://www.cnblogs.com/yemeng/p/6253097.html

2018-07-12
    Cython程序打包过程问题分析。
	1.使用Cython重构行情数据抓取模块。为消除层级调用Cython中的错误（程序入口函数调用DataScrape类，然后该类调用Cython封装子模块），
	简化浓缩了行情数据抓取模块为单一DataScrape包。
	2.程序运行中报错“Importerror no module named requests”。经分析，pyinstaller打包过程中隐形导入依赖库缺失，需要编辑Stock.spec文件--
	因为需要隐形导入talib和requests两个库，所以不能使用命令行的方式。具体见optimization分支提交。
	3.经过测试可知，行情数据抓取模块的Cython重构对于程序运行速度提升无关。应该该模块依赖于网络状况和被抓取的服务器响应，且耗时波动较大。

